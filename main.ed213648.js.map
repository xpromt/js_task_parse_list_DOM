{"version":3,"sources":["scripts/main.js"],"names":["empList","document","querySelector","emp","querySelectorAll","sortList","list","sort","x","y","prev","dataset","salary","replace","next","append","getEmployees","map","employee","name","textContent"],"mappings":";AAAA,aAwBA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAtBA,IAAMA,EAAUC,SAASC,cAAc,MACjCC,EAAUF,EAAAA,SAASG,iBAAiB,OAE1C,SAASC,EAASC,GAQTN,OAPPM,EAAKC,KAAK,SAACC,EAAGC,GACNC,IAAAA,GAAQF,EAAEG,QAAQC,OAAOC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAGtDC,OAFOL,EAAEE,QAAQC,OAAOC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAE/CH,IAGTV,EAAQe,OAARf,MAAAA,EAAkBM,EAAAA,IAG3B,SAASU,EAAaV,GACb,OAAA,EAAIA,GAAMW,IAAI,SAAAC,GAAQ,OAAA,EAAA,CAC3BC,KAAMD,EAASE,aACZF,EAASP,WAIhBN,EAASF,GACTa,EAAab","file":"main.ed213648.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst empList = document.querySelector('ul');\nconst emp = [...document.querySelectorAll('li')];\n\nfunction sortList(list) {\n  list.sort((x, y) => {\n    const prev = +x.dataset.salary.replace(',', '').replace('$', '');\n    const next = +y.dataset.salary.replace(',', '').replace('$', '');\n\n    return next - prev;\n  });\n\n  return empList.append(...list);\n}\n\nfunction getEmployees(list) {\n  return [...list].map(employee => ({\n    name: employee.textContent,\n    ...employee.dataset,\n  }));\n}\n\nsortList(emp);\ngetEmployees(emp);\n"]}